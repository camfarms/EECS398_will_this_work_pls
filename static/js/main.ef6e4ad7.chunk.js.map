{"version":3,"sources":["components/headerComponent/tortoise_white.png","components/headerComponent/navBar.js","ArtistProfile.js","Lyrics.js","Recommendations/Recommendations.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","src","logo","alt","width","height","mode","Component","ArtistProfile","state","artist","undefined","artistInfo","refreshArtist","bind","self","this","Promise","resolve","reject","props","spotifyApi","getMyCurrentPlaybackState","then","response","item","setState","artists","name","wikiApiUrl","fetch","json","data","pageid","query","pageids","info","getArtist","getArtistInfo","onRef","className","Lyrics","song","LyricsInfo","title","TypeError","a","lyrics","requestLyricsFor","getSong","getLyrics","split","map","i","key","text-align","spotifyWebApi","Spotify","useStyles","makeStyles","root","overflowX","table","minWidth","tableWrapper","maxHeight","overflow","baseUrl","HttpClient","get","url","callback","req","XMLHttpRequest","responseType","onreadystatechange","readyState","status","accessToken","getAccessToken","open","setRequestHeader","send","createData","albumCover","preview","addToQueue","recs","trackSeed","artistSeed","id","length","console","log","getRecommendations","limit","setSeeds","client","getUrl","previewUrl","track_name","tracks","preview_url","output","album","images","push","setRecommendations","RecommendationsTable","classes","React","useState","page","setPage","rowsPerPage","setRowsPerPage","previewSongButton","Icon","Paper","Table","stickyHeader","aria-label","TableHead","TableRow","TableCell","align","TableBody","slice","row","hover","component","scope","href","TablePagination","rowsPerPageOptions","count","backIconButtonProps","nextIconButtonProps","onChangePage","event","newPage","onChangeRowsPerPage","target","value","timeRemaining","imageUrl","adaptive","themeMode","primary","secondary","grey","play","shuffle","playIcon","shuffleIcon","componentToHex","c","hex","toString","theme","createMuiTheme","palette","type","main","App","params","getHashParams","loggedIn","access_token","nowPlaying","artistName","songInfo","image","setAccessToken","e","hashParams","r","q","window","location","hash","substring","exec","decodeURIComponent","tempName","tempArtist","tempImage","songProgress","progress_ms","songDuration","duration_ms","skipToNext","refresh","skipToPrevious","pause","setShuffle","getNowPlaying","updateTheme","setTimeout","clearTimeout","forceUpdate","Vibrant","from","getPalette","Math","round","_rgb","g","b","setColor","keyName","handle","getLastSong","getNextSong","getPause","getShuffle","onKeyDown","CssBaseline","Button","variant","color","onClick","Grid","container","spacing","xs","ExpansionPanel","ExpansionPanelSummary","expandIcon","Typography","ExpansionPanelDetails","padding","ref","style","windows","ButtonGroup","defaultTheme","themeModeToggle","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ef6e4ad7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tortoise_white.b97c5779.png\";","import React, { Component } from 'react';\n//import { Link } from 'react-router-dom';\nimport logo from './tortoise_white.png';\n\nclass NavBar extends Component {\n  render() {\n    return (\n      <header>\n        <img src={logo} alt=\"logo\" width={500} height={100} mode='fit'/>\n      </header>\n    )\n  }\n}\n\nexport default NavBar;","import React, {Component} from 'react';\nimport './ArtistProfile.css';\n\n\n/* This class is a react component containing the artist profile functionality. In order for this component\n    to function properly, you must pass it a Spotify object from spotify-web-api-js through props.spotifyApi.\n    Assuming a valid and functional Spotify object is passed in, this allows this component to view what song \n    the user is currently playing.\n    \n    To refresh the artist profile, simply call refreshArtist()*/\nclass ArtistProfile extends Component {\n\n    //Make sure to pass the spotify api object as a prop\n    constructor() {\n        super();\n        this.state = {\n            artist: undefined,\n            artistInfo: \"\"\n        }\n        this.refreshArtist = this.refreshArtist.bind(this);\n    }\n\n    /*Get the artist object of the main artist of the currently playing song.\n      Returns a Promise that resolves if this component's state is succesfully updated to the currently\n      playing artist.\n      Returns a Promise so that you can ensure the currently playing artist is retrieved before doing anything\n      else such as looking up that artist's info. */\n    async getArtist() {\n        var self = this;\n        return new Promise(function(resolve, reject) {\n            if (!(self.props.spotifyApi === undefined)) {\n                self.props.spotifyApi.getMyCurrentPlaybackState().then((response) => {\n                    if (!(response.item === undefined)) {\n                        self.setState({ \n                            artist: response.item.artists[0].name\n                        })\n                        resolve();\n                    } else {reject('Error: Invalid Song Object')}\n                })\n            } else {reject('Error: Invalid Spotify API')}\n        });\n    }\n\n    /*Updates this component's state so that it has the currently playing artist's info. */\n    getArtistInfo() {\n        var self = this;\n        var wikiApiUrl = 'https://en.wikipedia.org/w/api.php?format=json&action=query&prop=extracts&exintro' +\n            '&explaintext&redirects=1&origin=*&indexpageids&titles=' + self.state.artist;\n        fetch(wikiApiUrl)\n        .then(response => {\n            return response.json();\n        }).then(data => {\n            var pageid = data.query.pageids[0];\n            let info = data['query']['pages'][pageid]['extract'];\n            self.setState({artistInfo: info});\n        })\n    }\n\n\n    async refreshArtist() {\n        await this.getArtist();\n        this.getArtistInfo();        \n    }\n\n    componentDidMount() {\n        this.props.onRef(this);\n    }\n\n    componentWillUnmount() {\n        this.props.onRef(undefined);\n    }\n\n    render() {\n\n        return (\n            <div className='artist'>\n                {this.state.artistInfo}\n            </div>\n\n        )\n    }\n\n}\n\nexport default ArtistProfile;","import React, {Component} from 'react';\nimport './Lyrics.css';\n\nclass Lyrics extends Component {\n\n    //Make sure to pass the spotify api object as a prop\n    constructor() {\n        super();\n        this.state = {\n            artist: undefined,\n            song: undefined,\n            LyricsInfo: \"No Lyrics loaded yet\"\n        }\n        this.refreshArtist = this.refreshArtist.bind(this);\n    }\n\n    /*Get the artist object of the main artist of the currently playing song.\n      Returns a Promise that resolves if this component's state is succesfully updated to the currently\n      playing artist.\n      Returns a Promise so that you can ensure the currently playing artist is retrieved before doing anything\n      else such as looking up that artist's info. */\n    \n      async getSong() {\n        var self = this;\n        return new Promise(function(resolve, reject) {\n            if (!(self.props.spotifyApi === undefined)) {\n                self.props.spotifyApi.getMyCurrentPlaybackState().then((response) => {\n                    if (!(response.item === undefined)) {\n                        self.setState({ \n                            song: response.item.name\n                        })\n                        resolve();\n                    } else {reject()}\n                })\n            } else {reject()}\n        });\n    }\n\n    async getArtist() {\n        var self = this;\n        return new Promise(function(resolve, reject) {\n            if (!(self.props.spotifyApi === undefined)) {\n                self.props.spotifyApi.getMyCurrentPlaybackState().then((response) => {\n                    if (!(response.item === undefined)) {\n                        self.setState({ \n                            artist: response.item.artists[0].name\n                        })\n                        resolve();\n                    } else {reject()}\n                })\n            } else {reject()}\n        });\n    }\n    \n    async requestLyricsFor(title) {\n        if (!title) throw new TypeError('Input value was undefined!');\n        return new Promise(async function(resolve, reject) {\n        const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n        var response = await fetch(proxyurl + `https://some-random-api.ml/lyrics/?title=${title}`)\n        response = await response.json()\n        resolve(response.lyrics)\n    })\n    }\n\n    async getLyrics(){\n      var self = this;\n      var lyrics = await this.requestLyricsFor(self.state.song + \" \" + self.state.artist); \n      self.setState({LyricsInfo: lyrics})\n      \n      //console.log(lyrics)\n    }\n\n\n    async refreshArtist() {\n        await this.getSong();\n        await this.getArtist();\n        this.getLyrics();        \n    }\n\n    componentDidMount() {\n        this.props.onRef(this);\n    }\n\n    componentWillUnmount() {\n        this.props.onRef(undefined);\n    }\n\n    render() {\n        var lyrics = this.state.LyricsInfo;\n        if (lyrics === undefined) {\n            lyrics = \"No Lyrics loaded yet\";\n        }\n        return (\n            <div className='lyrics'>\n                {lyrics.split('\\n').map((item, i) => (\n                    <p key={i} text-align='center'>{item}</p>\n                ))}\n            </div>\n\n        )\n    }\n\n}\n\nexport default Lyrics;","import React from 'react';\nimport './Recommendations.css';\nimport Spotify from 'spotify-web-api-js';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport Paper from '@material-ui/core/Paper';\nimport { TableBody } from '@material-ui/core';\nimport Icon from '@material-ui/core/Icon';\n\nconst spotifyWebApi = new Spotify()\n\nconst useStyles = makeStyles({\n    root: {\n        width: '100%',\n        overflowX: 'auto',\n    },\n    table: {\n        minWidth: 650,\n    },\n    tableWrapper: {\n        maxHeight: 440,\n        overflow: 'auto',\n    },\n});\n\nvar baseUrl = 'https://api.spotify.com/v1/recommendations?';\n// function that makes http requests\nclass HttpClient {\n    constructor() {\n        this.get = function (url, callback) {\n            var req = new XMLHttpRequest();\n            req.responseType = 'json';\n            req.onreadystatechange = function () {\n                if (req.readyState === 4 && req.status === 200)\n                    callback(req.response);\n            };\n            var accessToken = spotifyWebApi.getAccessToken();\n            req.open('GET', url, true);\n            req.setRequestHeader('Authorization', 'Bearer ' + accessToken);\n            req.send();\n        };\n    }\n}\n\nfunction createData(song, artist, albumCover, preview, addToQueue) {\n    return { song, artist ,albumCover, preview, addToQueue };\n}\n\nvar recs = [];\nvar trackSeed = undefined;\nvar artistSeed = undefined;\n\n// function that gets current playback state and sets state of track seed and artist seed\nasync function setSeeds() {\n    return new Promise(function(resolve, reject) {\n        if (!(spotifyWebApi === undefined)) {\n            spotifyWebApi.getMyCurrentPlaybackState().then((response) => {\n                trackSeed = undefined;\n                artistSeed = undefined;\n                if (!(response.item === undefined)) {\n                    trackSeed = response.item.id;\n                    if (response.item.artists[0].id.length === 1) {\n                        artistSeed  = response.item.artists[0].id;\n                    }\n                    else {\n                        artistSeed = response.item.artists[0].id;\n                        for (var i = 1; i < response.item.artists.length; i++) {\n                            artistSeed = artistSeed + \",\" + response.item.artists[i].id;\n                        }\n                    }\n                    console.log(artistSeed);\n                }\n            })\n            resolve();\n        }\n        else { reject(); }\n    });\n}\n\n// function that gets recommendations based on seeds set and returns the indicated number of song recs\nfunction setRecommendations(limit) {\n    var client = new HttpClient();\n    var getUrl = baseUrl;\n    console.log(artistSeed);\n    if (!(artistSeed === undefined) && !(trackSeed === undefined)) {\n        getUrl = getUrl + 'seed_artists=' + artistSeed + \n                        '&seed_tracks=' + trackSeed + \n                        '&limit=' + limit +\n                        '&market=US';\n        console.log(getUrl);\n        client.get(getUrl, function(response) {\n            recs = [];\n            var previewUrl = '';\n            if (!(response === undefined)) {\n                for (var i = 0; i < limit; i++) {\n                    var track_name = response.tracks[i].name;\n                    var artist = response.tracks[i].artists[0].name;\n                    if (response.tracks[i].preview_url != null) {\n                        previewUrl = response.tracks[i].preview_url;\n                    }\n                    else {\n                        previewUrl = \"No Preview Available\";\n                    }\n                    var albumArtUrl = response.tracks[i].album.images[0].url;\n                    var output = createData(track_name, artist, albumArtUrl, previewUrl);\n                    recs.push(output);\n                }\n            }\n            //console.log(recs);\n        });\n    }\n}\n\nfunction getRecommendations(limit) {\n    setSeeds();\n    setRecommendations(limit);\n}\n\n\nexport default function RecommendationsTable() {\n    const classes = useStyles();\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(10);\n    const previewSongButton = <Icon>play_circle_outline</Icon>;\n\n    getRecommendations(50);\n    \n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n    \n    const handleChangeRowsPerPage = event => {\n        setRowsPerPage(+event.target.value);\n        setPage(0);\n    };\n\n    if (recs.length > 0) {\n        return (\n            <Paper className={classes.root}>\n                <div className={classes.tableWrapper}>\n                    <Table className={classes.table} stickyHeader aria-label=\"Song Recommendations\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell></TableCell>\n                                <TableCell align=\"left\">Song Name</TableCell>\n                                <TableCell align=\"left\">Artist</TableCell>\n                                <TableCell align=\"left\">Preview</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {recs.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(row => (\n                                <TableRow hover className=\"Row\" key={row.song}>\n                                    <TableCell className=\"AlbumCover\" align=\"left\">\n                                        <div className=\"img\"><img src={row.albumCover} alt=\"album cover\"/></div>\n                                    </TableCell>\n                                    <TableCell component=\"th\" scope=\"row\">{row.song}</TableCell>\n                                    <TableCell align=\"left\">{row.artist}</TableCell>\n                                    <TableCell align=\"left\" component=\"a\" href={row.preview}>\n                                        <div>{previewSongButton}</div>\n                                    </TableCell>\n                                </TableRow>  \n                            ))}\n                        </TableBody>\n                    </Table>\n                    </div>\n            <TablePagination\n                rowsPerPageOptions={[5, 10, 25]}\n                component=\"div\"\n                count={recs.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                backIconButtonProps={{\n                'aria-label': 'previous page',\n                }}\n                nextIconButtonProps={{\n                'aria-label': 'next page',\n                }}\n                onChangePage={handleChangePage}\n                onChangeRowsPerPage={handleChangeRowsPerPage}\n            />\n        </Paper>\n        );\n    }\n    else {\n        return (\n            <div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport Spotify from 'spotify-web-api-js';\nimport NavBar from './components/headerComponent/navBar.js';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport ArtistProfile from './ArtistProfile.js';\nimport Lyrics from './Lyrics.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport RecommendationsTable from './Recommendations/Recommendations.js';\nimport {createMuiTheme} from '@material-ui/core/styles';\nimport { ThemeProvider as MuiThemeProvider } from '@material-ui/core/styles'\nimport { grey } from '@material-ui/core/colors';\nimport { CssBaseline } from '@material-ui/core';\nimport Grid from '@material-ui/core/Grid';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Vibrant from 'node-vibrant';\nimport Hotkeys from 'react-hot-keys';\nimport Icon from '@material-ui/core/Icon';\n\nconst spotifyWebApi = new Spotify()\nvar timeRemaining = undefined;\nvar imageUrl = '';\nvar adaptive = false;\nvar themeMode = \"dark\";\nvar primary = '#4caf50';\nvar secondary = grey;\nvar play = true;\nvar shuffle = false;\nvar playIcon = <Icon>pause_circle_outline</Icon>;\nvar shuffleIcon = <Icon>shuffle</Icon>;\n\nfunction componentToHex(c) {\n  var hex = c.toString(16);\n  return hex.length === 1 ? \"0\" + hex : hex;\n}\n\nfunction rgbToHex(r, g, b) {\n  return \"#\" + componentToHex(r) + componentToHex(g) + componentToHex(b);\n}\n\nvar theme = createMuiTheme( {\n  palette: {\n    type: themeMode,\n    primary: {\n      main: primary\n    },\n    secondary: secondary,\n  },\n});\n\nclass App extends Component {\n  constructor() {\n    super();\n    const params = this.getHashParams();\n    this.state = {\n      loggedIn: params.access_token? true: false,\n      nowPlaying: {\n        name: 'Not Checked',\n        artistName: 'Not Checked',\n        songInfo: '',\n        image: ''\n      }\n    }\n    if (params.access_token) {\n      spotifyWebApi.setAccessToken(params.access_token);\n    }\n  }\n\n  getHashParams() {\n    var hashParams = {};\n    var e, r = /([^&;=]+)=?([^&;]*)/g,\n        q = window.location.hash.substring(1);\n    while ( e = r.exec(q)) {\n       hashParams[e[1]] = decodeURIComponent(e[2]);\n    }\n    return hashParams;\n  }\n    \n  getNowPlaying() {\n    if (!(ArtistProfile === undefined)) {\n      this.ArtistProfile.refreshArtist();\n    }\n    if (!(Lyrics === undefined)) {\n      this.Lyrics.refreshArtist();\n    }\n\n    spotifyWebApi.getMyCurrentPlaybackState()\n    .then((response) => {\n      var tempName;\n      var tempArtist;\n      var tempImage;\n      var songInfo;\n      if (response.item === undefined) {\n        tempName = 'You are not currently playing any songs on Spotify';\n        tempArtist = 'You are not currently playing any songs on Spotify';\n        songInfo = '';\n        tempImage = undefined;\n      }\n      else {\n        tempName = response.item.name;\n        tempArtist = response.item.artists[0].name;\n        tempImage = response.item.album.images[0].url;\n        imageUrl = tempImage;\n        songInfo = tempName + \" - \" + tempArtist;\n        var songProgress = response.progress_ms;\n        var songDuration = response.item.duration_ms;\n        timeRemaining = songDuration - songProgress;\n      }\n      this.setState( {\n        nowPlaying: {\n          name: tempName,\n          artistName: tempArtist,\n          image: tempImage,\n          songInfo: songInfo\n        }\n      })\n    })\n  }\n\n  getNextSong() {\n    spotifyWebApi.skipToNext();\n    this.refresh();\n    console.log(timeRemaining);\n  }\n\n  getLastSong() {\n    spotifyWebApi.skipToPrevious();\n    this.refresh();\n    console.log(timeRemaining);\n  }\n\n  getPause(){    \n    if (play) {\n      spotifyWebApi.pause();\n      playIcon = <Icon>play_circle_outline</Icon>;\n      this.refresh();\n      play = false;\n    }\n    else {\n      spotifyWebApi.play();\n      playIcon = <Icon>pause_circle_outline</Icon>;\n      this.refresh();\n      play = true;\n    }\n  }\n\n  getShuffle(){\n    if (!shuffle) {\n      spotifyWebApi.setShuffle(true);\n      shuffleIcon = <Icon>shuffle</Icon>;\n      shuffle = true;\n    }\n    else {\n      spotifyWebApi.setShuffle(false);\n      shuffleIcon = <Icon>shuffle</Icon>;\n      shuffle = false;\n    }\n  }\n\n  // to get currently playing song on load\n  componentDidMount() {\n    this.getNowPlaying();\n  }\n\n  refresh() {\n    this.getNowPlaying();\n    if (adaptive) {\n      this.updateTheme();\n    }\n    var self = this\n    setTimeout(function() {\n      self.getNowPlaying();\n      if (adaptive) {\n        self.updateTheme();\n      }\n    }, 250);\n    clearTimeout();\n    setTimeout(function() {\n      self.getNowPlaying();\n      if (adaptive) {\n        self.updateTheme();\n      }\n    }, 500);\n    clearTimeout();\n  }\n\n  defaultTheme() {\n    adaptive = false;\n    primary = '#4caf50';\n    theme = createMuiTheme( {\n      palette: {\n        type: themeMode,\n        primary: {\n          main: primary\n        },\n        secondary: secondary,\n      },\n    });\n    console.log(adaptive);\n    this.forceUpdate();\n  }\n\n  setColor() {\n    console.log(imageUrl);\n    if (imageUrl !== '') {\n      Vibrant.from(imageUrl).getPalette().then((palette) => primary = rgbToHex(Math.round(palette.Vibrant._rgb[0]), Math.round(palette.Vibrant._rgb[1]), Math.round(palette.Vibrant._rgb[2])));\n      theme = createMuiTheme( {\n        palette: {\n          type: themeMode,\n          primary: {\n            main: primary\n          },\n          secondary: secondary,\n        },\n      });\n      this.forceUpdate();\n    }\n  }\n\n  updateTheme() {\n    adaptive = true;\n    console.log(adaptive);\n    this.setColor();\n    var self = this\n    setTimeout(function() {\n      self.setColor();\n    }, 250);\n    clearTimeout();\n  }\n\n  themeModeToggle() {\n    if (themeMode === \"dark\") {\n      themeMode = \"light\";\n      theme = createMuiTheme( {\n        palette: {\n          type: themeMode,\n          primary: {\n            main: primary\n          },\n          secondary: secondary,\n        },\n      });\n    }\n    else {\n      themeMode = \"dark\";\n      theme = createMuiTheme( {\n        palette: {\n          type: themeMode,\n          primary: {\n            main: primary\n          },\n          secondary: secondary,\n        },\n      });\n    }\n    this.forceUpdate();\n  }\n\n  // to update whenever new song starts playing\n  /*\n  componentDidUpdate() {\n    console.log(timeRemaining);\n    if (timeRemaining != 0) {\n      const timer = setTimeout(() => {\n        this.getNowPlaying();\n        if (adaptive == true) {\n          this.updateTheme();\n        }\n      }, timeRemaining);\n      return() => clearTimeout(timer);\n    }\n    else {\n      const timer = setTimeout(() => {\n        console.log(\"error\");\n      }, 5000);\n      return() => clearTimeout(timer);\n    }\n  }\n  */\n\n  onKeyDown(keyName, e, handle) {\n    if (keyName === 'left') {\n      this.getLastSong(); \n    }\n    else if (keyName === 'right') {\n      this.getNextSong();\n    }\n    else if (keyName === 'space') {\n      this.getPause();\n    }\n    else if (keyName === 's') {\n      this.getShuffle();\n    }\n    else if (keyName === 'r') {\n      this.refresh();\n    }\n  }\n\n  render() {\n    return (\n    <div className=\"App\">\n      <Hotkeys \n        keyName=\"right,left,space,s,r\" \n        onKeyDown={this.onKeyDown.bind(this)}\n      ></Hotkeys>\n      <MuiThemeProvider theme={theme}>\n        <CssBaseline />\n        <div>\n          <NavBar />\n        </div>\n        <a href='https://tortoise-auth.herokuapp.com/'> \n        <Button variant=\"contained\" color=\"primary\">Login with Spotify</Button> \n        </a>\n        <div>\n          <Button variant=\"contained\" color=\"primary\" onClick={() => this.refresh()}>Refresh</Button>\n        </div>\n        <div>\n          <Grid container spacing={3}>\n            <Grid item xs={4}>\n              <ExpansionPanel>\n                <ExpansionPanelSummary expandIcon={<ExpandMoreIcon color='primary'/>}>\n                  <Typography>Artist Profile</Typography>\n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails padding=\"0\">\n                <ArtistProfile spotifyApi={spotifyWebApi} onRef={ref => (this.ArtistProfile = ref)}/>\n                </ExpansionPanelDetails>\n              </ExpansionPanel>\n            </Grid>\n            <Grid item xs={4}>\n              <img src={this.state.nowPlaying.image} alt=\"album cover\" width={300} height={300} mode='fit' style = {{windows: 100}}/>\n            </Grid>\n            <Grid item xs={4}>\n              <ExpansionPanel>\n              <ExpansionPanelSummary expandIcon={<ExpandMoreIcon color='primary'/>}>\n                <Typography>Lyrics</Typography>\n              </ExpansionPanelSummary>\n              <ExpansionPanelDetails padding=\"0\">\n                <Lyrics spotifyApi={spotifyWebApi} onRef={ref => (this.Lyrics = ref)} />\n              </ExpansionPanelDetails>\n            </ExpansionPanel>\n            </Grid>\n          </Grid>\n        </div>\n        <div><Button variant='outlined'>{this.state.nowPlaying.songInfo}</Button></div>\n        <div> \n        <ButtonGroup\n          variant=\"contained\"\n          color=\"primary\">\n            <Button onClick={() => this.getLastSong()}> \n            <Icon>skip_previous</Icon>\n          </Button>\n          <Button onClick={() => this.getPause()}> \n            {playIcon}\n          </Button>\n          <Button onClick={() => this.getNextSong()}>\n            <Icon>skip_next</Icon>\n          </Button>\n          <Button onClick={() => this.getShuffle()}>\n            {shuffleIcon}\n          </Button>\n        </ButtonGroup>\n        </div>  \n        <div>\n          <ExpansionPanel>\n            <ExpansionPanelSummary\n              expandIcon={<ExpandMoreIcon color='primary'/>}\n            >\n              <Typography>Song Recommendations</Typography>\n            </ExpansionPanelSummary>\n            <ExpansionPanelDetails>\n              <RecommendationsTable/>\n            </ExpansionPanelDetails>\n          </ExpansionPanel>\n        </div>\n        <div>\n          <ButtonGroup variant='contained' color='primary'>\n            <Button onClick={() => this.defaultTheme()}>Default Theme</Button>\n            <Button onClick={() => this.updateTheme()}>Adaptive Theme</Button>\n          </ButtonGroup>\n        </div>\n        <div>\n          <Button variant='outlined' color='primary' onClick={() => this.themeModeToggle()}>Dark/Light Mode Toggle</Button>\n        </div>\n      </MuiThemeProvider> \n    </div>   \n  );\n  }\n}\n  \nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}